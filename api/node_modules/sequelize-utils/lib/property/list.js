(function() {
  var createModelCache, listGetter, parse, stringify, _;

  _ = require('lodash');

  createModelCache = require('./property-utils').createModelCache;

  parse = function(value, separator) {
    if (!(value != null ? value.length : void 0) || !_.isFunction(value != null ? value.split : void 0)) {
      return [];
    } else {
      return value.split(separator);
    }
  };

  stringify = function(value, separator) {
    if (_.isArray(value)) {
      return value.join(separator);
    } else if (!_.isString(value)) {
      return '';
    } else {
      return value;
    }
  };

  listGetter = module.exports = function(propName, options) {
    var customGetter, customSetter, getter, separator, setter;
    separator = (options != null ? options.separator : void 0) || ',';
    customGetter = options != null ? options.get : void 0;
    if (options != null) {
      delete options.get;
    }
    getter = function() {
      var cache, model;
      cache = createModelCache(this, propName);
      if (cache.deserialized) {
        return cache.deserialized;
      }
      model = this;
      cache.deserialized = parse(this.getDataValue(propName), separator);
      if (customGetter) {
        cache.deserialized = customGetter.call(this, cache.deserialized);
      }
      return cache.deserialized;
    };
    customSetter = options != null ? options.set : void 0;
    if (options != null) {
      delete options.set;
    }
    setter = function(value) {
      var cache;
      value = stringify(value, separator);
      if (customSetter) {
        value = customSetter.call(this, value);
      }
      cache = createModelCache(this, propName);
      delete cache.deserialized;
      return this.setDataValue(propName, value);
    };
    if (options != null ? options.defaultValue : void 0) {
      options.defaultValue = stringify(options.defaultValue);
    }
    return _.extend({
      type: 'LONGTEXT',
      get: getter,
      set: setter
    }, options);
  };

}).call(this);
