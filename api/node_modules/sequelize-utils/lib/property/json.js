(function() {
  var createModelCache, isJSON, isJSONRegex, jsonGetter, parse, parseSafe, stringify, _;

  _ = require('lodash');

  createModelCache = require('./property-utils').createModelCache;

  parse = JSON.parse;

  parseSafe = function(value) {
    var err;
    if (!value) {
      return;
    }
    try {
      return parse(value);
    } catch (_error) {
      err = _error;
      return console.error(err);
    }
  };

  isJSONRegex = require('is-json');

  isJSON = function(value) {
    var err;
    if (value === '"[]"') {
      return true;
    }
    if (value === '"{}"') {
      return true;
    }
    if (!isJSONRegex(value)) {
      return false;
    }
    try {
      parse(value);
    } catch (_error) {
      err = _error;
      return false;
    }
    return true;
  };

  stringify = function(value, indent) {
    if (!_.isUndefined(value)) {
      return value = JSON.stringify(value, null, indent);
    }
  };

  jsonGetter = module.exports = function(propName, options) {
    var customGetter, customSetter, getter, indent, setter;
    indent = 2;
    if (!_.isUndefined(options != null ? options.indent : void 0)) {
      indent = options.indent;
      delete options.indent;
    }
    customGetter = options != null ? options.get : void 0;
    if (options != null) {
      delete options.get;
    }
    getter = function() {
      var cache, model;
      cache = createModelCache(this, propName);
      if (cache.deserialized) {
        return cache.deserialized;
      }
      model = this;
      cache.deserialized = parseSafe(this.getDataValue(propName));
      if (customGetter) {
        cache.deserialized = customGetter.call(this, cache.deserialized);
      }
      return cache.deserialized;
    };
    customSetter = options != null ? options.set : void 0;
    if (options != null) {
      delete options.set;
    }
    setter = function(value) {
      var cache;
      if (!isJSON(value)) {
        if (customSetter) {
          value = customSetter.call(this, value);
        }
        value = stringify(value, indent);
      }
      cache = createModelCache(this, propName);
      delete cache.deserialized;
      return this.setDataValue(propName, value);
    };
    if (options != null ? options.defaultValue : void 0) {
      options.defaultValue = stringify(options.defaultValue);
    }
    return _.extend({
      type: 'LONGTEXT',
      get: getter,
      set: setter
    }, options);
  };

}).call(this);
